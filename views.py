from django.shortcuts import render

# Create your views here.
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.models import User
from .models import Task, Notification, Report
from .forms import TaskForm, SignupForm, LoginForm
import requests
from .forms import ReportForm
from django.contrib import messages

def user_login(request):
    if request.method == "POST":
        form = LoginForm(request.POST)
        if form.is_valid():
            email = form.cleaned_data['email']
            password = form.cleaned_data['password']
            user = authenticate(request, username=email, password=password)
            if user:
                login(request, user)
                return redirect('SmartTaskManagementSystem:dashboard')
            else:
                messages.error(request, "Invalid email or password.")  # Add error message
        else:
            messages.error(request, "Invalid Details") # Add form error message
    else:
        form = LoginForm()
    return render(request, "SmartTaskManagementSystem/login.html", {"form": form})


def user_signup(request):
    if request.method == "POST":
        form = SignupForm(request.POST)
        if form.is_valid():
            email = form.cleaned_data['email']
            password = form.cleaned_data['password']
            user = User.objects.create_user(username=email, email=email, password=password)
            login(request, user)
            return redirect('SmartTaskManagementSystem:dashboard')
    else:
        form = SignupForm()
    return render(request, "SmartTaskManagementSystem/signup.html", {"form": form})

@login_required
def user_logout(request):
    logout(request)
    return redirect('SmartTaskManagementSystem:login')

@login_required
def dashboard(request):
    tasks = Task.objects.filter(assignee=request.user)
    return render(request, "tasks.html", {"tasks": tasks})

@login_required
def create_task(request):
    if request.method == "POST":
        form = TaskForm(request.POST)
        if form.is_valid():
            task = Task(
                title=form.cleaned_data['title'],
                description=form.cleaned_data['description'],
                status=form.cleaned_data['status'],
                assignee=request.user  
            )
            task.save()
            return redirect("SmartTaskManagementSystem:dashboard")  
    else:
        form = TaskForm()    
    return render(request, "SmartTaskManagementSystem/create_task.html", {"form": form})  

@login_required
def update_task_status(request, task_id):
    task = Task.objects.get(id=task_id, assignee=request.user)
    if request.method == "POST":
        old_status = task.status
        new_status = request.POST.get("status")

        if old_status != new_status:
            task.status = new_status
            task.save()

            # Create notification when task status changes
            Notification.objects.create(
                message=f"Task '{task.title}' status changed to {new_status}",
                recipient=task.assignee
            )
        return redirect("SmartTaskManagementSystem:dashboard")
    return render(request, "SmartTaskManagementSystem/update_task.html", {"task": task})


@login_required
def github_issues(request):
    """Fetches GitHub issues and renders them in the template."""
    repo = "padal1325454/STMS"  # Use "owner/repository" format
    url = f"https://api.github.com/repos/{repo}/issues"

    issues = []
    try:
        response = requests.get(url, timeout=5, headers={"Accept": "application/vnd.github.v3+json"})
        response.raise_for_status() 
        issues = response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error fetching GitHub issues: {e}")

    return render(request, "SmartTaskManagementSystem/github.html", {"issues": issues})

@login_required
def notifications(request):
    """Fetches user notifications and renders them in the template."""
    user_notifications = Notification.objects.filter(recipient=request.user).order_by('-timestamp')
    return render(request, "SmartTaskManagementSystem/notifications.html", {"notifications": user_notifications})

@login_required
def generate_report(request):
    """Generates a report and saves it to the database."""
    if request.method == "POST":
        form = ReportForm(request.POST) 
        if form.is_valid():
            report = form.save(commit=False)
            report.generated_by = request.user  # Assign the current user 
            report.save()
            return redirect('SmartTaskManagementSystem:reports')  # Redirect to the reports page
    else:
        form = ReportForm()

    # Fetch all reports generated by the user
    user_reports = Report.objects.filter(generated_by=request.user).order_by('-created_at')

    return render(request, "SmartTaskManagementSystem/reports.html", {"form": form, "reports": user_reports})